import asyncio
from telethon import TelegramClient, events
from telethon.tl.functions.messages import GetDialogFiltersRequest
from telethon.tl.types import DialogFilterChatlist
from dotenv import load_dotenv
import os

load_dotenv()

api_hash = os.getenv("API_HASH")
api_id = int(os.getenv("API_ID"))
session_name = 'user_session'

client = TelegramClient(session_name, api_id, api_hash)

async def get_folders():
    result = await client(GetDialogFiltersRequest())
    folders = []
    for f in result.filters:
        if isinstance(f, DialogFilterChatlist):
            folders.append((f, f.title.text))
    return folders

async def get_chats_from_folder(folder):
    chat_ids = []
    for peer in folder.include_peers:
        try:
            entity = await client.get_entity(peer)
            chat_ids.append(entity)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Ç –∑ peer {peer}: {e}")
    return chat_ids

async def main():
    print("üìÇ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Telegram...")
    await client.start()

    print("üìÇ –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ Telegram...")
    folders = await get_folders()

    if not folders:
        print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞–ø–æ–∫.")
        return

    print("\nüîñ –î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–ø–∫–∏:")
    for idx, folder in enumerate(folders, 1):
        print(f"{idx}: {folder[1]}")  # folder[1] ‚Äî —Ü–µ –Ω–∞–∑–≤–∞ –ø–∞–ø–∫–∏

    selected_input = input("\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∏ –ø–∞–ø–æ–∫ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª): ").strip()
    if not selected_input:
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –æ–±—Ä–∞–Ω–∞ –∞–±–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        return

    try:
        selected_indices = [int(i) - 1 for i in selected_input.split()]
    except:
        print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∏ –ø–∞–ø–æ–∫.")
        return

    selected_folders = []
    for i in selected_indices:
        if 0 <= i < len(folders):
            selected_folders.append(folders[i][0])  # folder[0] ‚Äî —Ü–µ —Å–∞–º –æ–±'—î–∫—Ç —Ñ—ñ–ª—å—Ç—Ä–∞

    if not selected_folders:
        print("‚ùå –ñ–æ–¥–Ω–∞ –ø–∞–ø–∫–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞.")
        return

    folder_keywords = {}
    monitored_chats = set()

    for folder in selected_folders:
        words = input(f"–í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –¥–ª—è –ø–∞–ø–∫–∏ '{folder.title.text}': ").strip().lower()
        keywords = [w for w in words.split() if w]
        if not keywords:
            print(f"‚ùå –î–ª—è –ø–∞–ø–∫–∏ '{folder.title.text}' –Ω–µ –≤–≤–µ–¥–µ–Ω–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤, –≤–æ–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è.")
            continue

        chats = await get_chats_from_folder(folder)
        if not chats:
            print(f"‚ö†Ô∏è –£ –ø–∞–ø—Ü—ñ '{folder.title.text}' –Ω–µ–º–∞—î —á–∞—Ç—ñ–≤.")
            continue

        folder_keywords[folder.title.text] = {
            'keywords': keywords,
            'chats': chats
        }
        monitored_chats.update(chat.id for chat in chats)

    if not folder_keywords:
        print("‚ùå –ù–µ–º–∞—î –ø–∞–ø–æ–∫ –∑ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ —ñ —á–∞—Ç–∞–º–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        return

    target_user = input("–í–≤–µ–¥–∏ username –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∫–æ–º—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ").strip()
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É.\n")

    @client.on(events.NewMessage(chats=list(monitored_chats)))
    async def handler(event):
        message_text = event.raw_text.lower()
        chat = event.chat

        for folder_title, data in folder_keywords.items():
            if chat in data['chats']:
                if any(keyword in message_text for keyword in data['keywords']):
                    try:
                        await client.forward_messages(target_user, event.message)
                        print(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Ç—É '{chat.title or chat.username}' —É –ø–∞–ø—Ü—ñ '{folder_title}' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user}")
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                    break

    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
